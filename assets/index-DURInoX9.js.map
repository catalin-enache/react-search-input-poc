{"version":3,"file":"index-DURInoX9.js","sources":["../../src/lib/debounce.ts","../../src/lib/hooks/useDebounce.ts","../../src/components/SelectableList/SelectableList.tsx","../../src/lib/hooks/useIsFirstRender.ts","../../src/lib/hooks/useIsMounted.ts","../../src/lib/highlightText.ts","../../src/lib/combineRefs.ts","../../public/assets/search.svg","../../src/components/AutoComplete/AutoComplete.tsx"],"sourcesContent":["export const debounce = (fn: (...args: any[]) => void, delay: number) => {\n  let timeoutId: NodeJS.Timeout | null;\n  return function (...args: any[]) {\n    timeoutId && clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, delay);\n    return () => {\n      if (timeoutId) {\n        // console.log('clearing timeout');\n        clearTimeout(timeoutId);\n        timeoutId = null;\n      }\n    };\n  };\n};\n","import { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { debounce as _debounce } from 'lib/debounce';\n\nexport const useDebounce = (fn: (...args: any[]) => void, delay: number) => {\n  const debounce = useMemo(() => _debounce(fn, delay), [fn, delay]);\n  const cancelDebounce = useRef<ReturnType<typeof debounce> | null>(null);\n\n  useEffect(() => {\n    // clearing timeout id on unmount\n    return () => {\n      cancelDebounce.current && cancelDebounce.current();\n    };\n  }, []);\n\n  return useCallback(\n    (...args: any[]) => {\n      cancelDebounce.current = debounce(...args);\n    },\n    [debounce]\n  );\n};\n","import {\n  useState,\n  memo,\n  useEffect,\n  useCallback,\n  ReactNode,\n  forwardRef\n} from 'react';\nimport './SelectableList.css';\n\nexport type Item = { id: string; value: string };\n\ninterface SelectableListProps {\n  items: Item[];\n  onSelect: (item: Item) => void;\n  isVisible?: boolean;\n  formatter?: (item: string) => ReactNode;\n}\n\nconst SelectableList = forwardRef<HTMLUListElement, SelectableListProps>(\n  ({ items, onSelect, isVisible, formatter = (item) => item }, ref) => {\n    const [selectedItem, setSelectedItem] = useState<Item | null>(null);\n\n    const handleKeyDown = useCallback(\n      (e: KeyboardEvent) => {\n        // prevent sending out selectedItem by arrow nav when hidden\n        if (!isVisible) return;\n        switch (e.key) {\n          case 'ArrowDown': {\n            e.preventDefault(); // prevents cursor from moving to the beginning/ending of the input\n            const index = !selectedItem ? -1 : items.indexOf(selectedItem);\n            const newSelectedItem = items[(index + 1) % items.length];\n            setSelectedItem(newSelectedItem);\n            onSelect(newSelectedItem);\n            break;\n          }\n          case 'ArrowUp': {\n            e.preventDefault();\n            const index = !selectedItem\n              ? items.length\n              : items.indexOf(selectedItem);\n            const newSelectedItem =\n              items[(index - 1 + items.length) % items.length];\n            setSelectedItem(newSelectedItem);\n            onSelect(newSelectedItem);\n            break;\n          }\n        }\n      },\n      [onSelect, selectedItem, items, isVisible]\n    );\n\n    useEffect(() => {\n      document.addEventListener('keydown', handleKeyDown);\n      return () => {\n        document.removeEventListener('keydown', handleKeyDown);\n      };\n    }, [handleKeyDown]);\n\n    return (\n      <ul\n        ref={ref}\n        className={`selectableList ${isVisible ? 'selectableList--visible' : ''}`}\n      >\n        {items.map((item) => (\n          <li\n            key={item.id}\n            onPointerDown={() => {\n              setSelectedItem(item);\n              onSelect(item);\n            }}\n            className={`selectableList__item ${selectedItem === item ? 'selectableList__item--selected' : ''}`}\n          >\n            {formatter(item.value)}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n);\n\nexport default memo(SelectableList);\n","import { useEffect, useRef } from 'react';\n\nexport const useIsFirstRender = () => {\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    isFirstRender.current = false;\n  }, []);\n  return isFirstRender.current;\n};\n","import { useRef, useEffect } from 'react';\n\nexport const useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n","export const highlightText = (inputString: string, highlights: string) => {\n  const tokens = highlights.split(' ').map((token) => token.trim());\n  const bolded = tokens.reduce((acc, token) => {\n    acc[token] = `<b>${token}</b>`;\n    return acc;\n  }, {} as any);\n  const words = inputString\n    .split(' ')\n    .map((word) => word.trim())\n    .filter(Boolean)\n    .map((word) => bolded[word] || word)\n    .join(' ');\n  return `<span>${words}</span>`;\n};\n","import { MutableRefObject, Ref } from 'react';\n\nexport const combineRefs = <T>(refs: Array<Ref<T>>) => {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref != null) {\n        (ref as MutableRefObject<T | null>).current = node;\n      }\n    });\n  };\n};\n","export default \"__VITE_ASSET__g50k1DIN__\"","import {\n  ChangeEvent,\n  useState,\n  useCallback,\n  useEffect,\n  useRef,\n  forwardRef\n} from 'react';\nimport { useDebounce } from 'lib/hooks/useDebounce';\nimport SelectableList, { Item } from 'components/SelectableList';\nimport { useIsFirstRender } from 'lib/hooks/useIsFirstRender';\nimport { useIsMounted } from 'lib/hooks/useIsMounted';\nimport { highlightText } from 'lib/highlightText';\nimport { combineRefs } from 'lib/combineRefs';\nimport searchIconUrl from 'publicAssets/search.svg';\nimport './AutoComplete.css';\n\nconst DEBOUNCE_DELAY = 300;\n\nconst formatHint = (highlights: string) => (hint: string) => (\n  <span dangerouslySetInnerHTML={{ __html: highlightText(hint, highlights) }} />\n);\n\ninterface AutoCompleteProps {\n  label?: string;\n  value: string;\n  onChange: (selectedHint: string) => void;\n  getHints: (value: string) => Promise<string[]>;\n}\n\nconst AutoComplete = forwardRef<HTMLInputElement, AutoCompleteProps>(\n  ({ label = 'Search', value, getHints, onChange }, ref) => {\n    const [internalValue, setInternalValue] = useState('');\n    const [selectedValue, setSelectedValue] = useState<string>(value);\n    const [debouncedValue, setDebouncedValueNoDelay] = useState(internalValue);\n    const setDebouncedValue = useDebounce(\n      setDebouncedValueNoDelay,\n      DEBOUNCE_DELAY\n    );\n    // input focus state is internal, it is not correlated with actual input focus\n    const [hasInputFocus, setHasInputFocus] = useState(false);\n    const [hints, setHints] = useState<Item[]>([]);\n    const shouldLookForHints = useRef(false);\n    const hasReceivedNewValue = useRef(internalValue !== value);\n    const [isLoading, setIsLoading] = useState(false);\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    const isFirstRender = useIsFirstRender();\n    const isMounted = useIsMounted();\n\n    const combinedRef = combineRefs([ref, inputRef]);\n\n    hasReceivedNewValue.current = internalValue !== value;\n\n    useEffect(() => {\n      if (debouncedValue === internalValue) return;\n      setDebouncedValue(internalValue);\n    }, [setDebouncedValue, internalValue, debouncedValue]);\n\n    const setSelectedValueAndSync = useCallback((value: string) => {\n      setSelectedValue(value);\n      setInternalValue(value);\n      setDebouncedValueNoDelay(value);\n    }, []);\n\n    // Submitting selectedValue (which can be a hint, or the value that user typed in)\n    useEffect(() => {\n      // setSelectedValue from inside setSelectedValueAndSync is redundant (since we just received it),\n      // but it doesn't matter for the sake of reusability\n      setSelectedValueAndSync(selectedValue);\n      onChange?.(selectedValue); // submitting\n    }, [onChange, selectedValue, setSelectedValueAndSync]);\n\n    const doGetHints = useCallback(\n      (valueToGetHintsFor: string) => {\n        setIsLoading(true);\n        // we only need to trim here\n        getHints?.(valueToGetHintsFor.trim()).then((hints) => {\n          if (!isMounted.current) return;\n          setHints(hints.map((hint) => ({ id: hint, value: hint })));\n          setIsLoading(false);\n        });\n        shouldLookForHints.current = false;\n      },\n      [getHints, isMounted]\n    );\n\n    // retrieving hints for debouncedValue\n    useEffect(() => {\n      if (!shouldLookForHints.current) return;\n      doGetHints(debouncedValue);\n    }, [setHints, getHints, debouncedValue, doGetHints]);\n\n    const handleInputChange = useCallback(\n      (e: ChangeEvent<HTMLInputElement>) => {\n        shouldLookForHints.current = true;\n        setHasInputFocus(true);\n        setInternalValue(e.target.value);\n      },\n      []\n    );\n\n    useEffect(() => {\n      if (hasReceivedNewValue.current) {\n        // The input can be seeded with a value from outside initially,\n        // in which case we want to look for hints\n        // This is for cases like sharing a link with a search query\n        shouldLookForHints.current = isFirstRender;\n        // sync internal value with the external value\n        // the external value is basically the submitted value\n        setInternalValue(value);\n      }\n    }, [value, isFirstRender]);\n\n    const handlePointerUp = useCallback((evt: PointerEvent) => {\n      if (\n        evt.target !== inputRef.current &&\n        document.activeElement !== inputRef.current\n      ) {\n        setHasInputFocus(false);\n      }\n    }, []);\n\n    const handlePointerDown = useCallback(\n      (evt: PointerEvent) => {\n        setHasInputFocus(evt.target === inputRef.current);\n        shouldLookForHints.current = evt.target !== inputRef.current;\n        if (shouldLookForHints.current) {\n          setSelectedValueAndSync(internalValue);\n          doGetHints(internalValue);\n        }\n      },\n      [internalValue, setSelectedValueAndSync, doGetHints]\n    );\n\n    useEffect(() => {\n      document.addEventListener('pointerdown', handlePointerDown);\n      return () => {\n        document.removeEventListener('pointerdown', handlePointerDown);\n      };\n    }, [handlePointerDown]);\n\n    useEffect(() => {\n      // Using blur is too early, because we can't select the hint\n      document.addEventListener('pointerup', handlePointerUp);\n      return () => {\n        document.removeEventListener('pointerup', handlePointerUp);\n      };\n    }, [handlePointerUp]);\n\n    const handleKeyDown = useCallback(\n      (evt: KeyboardEvent) => {\n        if (evt.key === 'Enter') {\n          shouldLookForHints.current = true;\n          setSelectedValueAndSync(internalValue);\n          doGetHints(internalValue);\n          if (inputRef.current === document.activeElement) {\n            if (hasInputFocus) {\n              // We're not closing here the dropdown if the input is empty\n              // but the empty value is still submitted to get default hints\n              setHasInputFocus(!internalValue);\n            } else {\n              // allowing to open the dropdown with enter key\n              setHasInputFocus(true);\n            }\n          }\n        }\n      },\n      [setSelectedValueAndSync, internalValue, hasInputFocus, doGetHints]\n    );\n\n    useEffect(() => {\n      document.addEventListener('keydown', handleKeyDown);\n      return () => {\n        document.removeEventListener('keydown', handleKeyDown);\n      };\n    }, [handleKeyDown]);\n\n    const handleSelectedHint = useCallback((item: Item) => {\n      // do not use setSelectedValueAndSync here, because we don't want to submit the value\n      setInternalValue(item.value);\n      setDebouncedValueNoDelay(item.value);\n      // setHasInputFocus(false);\n      setTimeout(() => {\n        // Wrapping it in setTimeout is due to browser behaviour.\n        // It needs to be timed out because the native focus is just about to be lost\n        // after selecting the hint.\n        inputRef.current?.focus();\n      });\n    }, []);\n\n    const shouldShowHints = hints.length > 0 && hasInputFocus;\n\n    return (\n      <div className=\"autoComplete\">\n        <div>\n          <label>\n            {label} {isLoading && '...'}\n            <span className=\"autoComplete__inputContainer\">\n              <input\n                ref={combinedRef}\n                className={`autoComplete__input ${shouldShowHints ? 'autoComplete__input--withHints' : ''}`}\n                type=\"search\" // type search adds a native clear button\n                value={internalValue}\n                onChange={handleInputChange}\n                placeholder=\"Search...\"\n              />\n              <span className=\"autoComplete__inputIcon\">\n                <svg>\n                  <use href={`${searchIconUrl}#icon`} />\n                </svg>\n              </span>\n            </span>\n          </label>\n        </div>\n        <div\n          className={`autoComplete__hints ${shouldShowHints ? 'autoComplete__hints--visible' : ''}`}\n        >\n          <SelectableList\n            formatter={formatHint(internalValue)}\n            items={hints}\n            isVisible={shouldShowHints}\n            onSelect={handleSelectedHint}\n          />\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default AutoComplete;\n"],"names":["debounce","fn","delay","timeoutId","args","useDebounce","useMemo","_debounce","cancelDebounce","useRef","useEffect","useCallback","SelectableList","forwardRef","items","onSelect","isVisible","formatter","item","ref","selectedItem","setSelectedItem","useState","handleKeyDown","e","index","newSelectedItem","jsx","memo","useIsFirstRender","isFirstRender","useIsMounted","isMounted","highlightText","inputString","highlights","bolded","token","acc","word","combineRefs","refs","node","searchIconUrl","DEBOUNCE_DELAY","formatHint","hint","AutoComplete","label","value","getHints","onChange","internalValue","setInternalValue","selectedValue","setSelectedValue","debouncedValue","setDebouncedValueNoDelay","setDebouncedValue","hasInputFocus","setHasInputFocus","hints","setHints","shouldLookForHints","hasReceivedNewValue","isLoading","setIsLoading","inputRef","combinedRef","setSelectedValueAndSync","doGetHints","valueToGetHintsFor","handleInputChange","handlePointerUp","evt","handlePointerDown","handleSelectedHint","_a","shouldShowHints","jsxs","AutoComplete$1"],"mappings":"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"}